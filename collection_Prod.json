{
	"info": {
		"_postman_id": "e85f9824-2bab-4801-9a2e-a0c017f8d7db",
		"name": "Analytics Driveroo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Sand",
			"item": [
				{
					"name": "All",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b0ea9ad7-afe7-4323-8a7f-8b2fbd40ab92",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"// console.log(pm.globals.get(\"todeyDate\"));",
									"",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"// pm.environment.set(\"current_timestamp\", moment().toISOString())",
									"// pm.environment.set(\"current_timestamp - 1 day\", moment().subtract(1, 'day').toISOString())",
									"// console.log(moment().toISOString());",
									"// console.log(moment().subtract(1, 'day').format(\"YYYY-MM-DD\"))",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a0d73db6-8be1-4e5a-a4af-0542f121500b",
								"exec": [
									"/*let responseJson2 = pm.response.json();",
									"//  console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    // url:\"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?page=\",",
									"    //   url: pm.globals.get(\"sand\")+\"/api/clockwork/\"+pm.globals.get(\"API_keys\")+\"?dateFrom=\"+pm.globals.get(\"todeyDate\")+\"&dateTo=\"+pm.globals.get(\"todeyDate\")+\"&page=\",",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&status=&sort=id&order=desc&id=&user=&time=&url=&ip=&method=&duration=\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json();",
									"        //   console.log(\"!!!!!!!!!!!1!!!!!!!!!!!!!\");",
									"        //   console.log(responseJson);  ",
									"        //   console.log(responseJson.last_page);  ",
									"        responseJson = response.json().data;",
									"",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"            if (responseJson[i].url==\"/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583\"){}",
									"            else{",
									"                if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                    if (responseJson[i].user_id==null){",
									"                        merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefinedUser\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                    }",
									"                    else{",
									"                        merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                    }",
									"",
									"",
									"",
									"                } else {",
									"                    if (!merged.dataURL[responseJson[i].id]) {",
									"                        merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                    }",
									"                    if (merged.dataURL[responseJson[i].url].user_id) {",
									"                        let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                        if (!qwe) {",
									"                            qwe = 1;",
									"                            if (responseJson[i].user_id==null){",
									"                                merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefinedUser\", qwe];",
									"                            }",
									"                            else{",
									"                                merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                            }",
									"                            merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                        }",
									"                        else {",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                        }",
									"                    }",
									"                    if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                        merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                    }",
									"                    merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                    merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"                }",
									"            }",
									"        }",
									"        ",
									"        // const dataMethodArr = Object.values(merged.dataMethod)",
									"        // const dataURLArr = Object.values(merged.dataURL)",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"        ",
									"        for (let i = 0; i < dataURL.length; i++) {",
									"        ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        // console.log(dataMethod);",
									"        // console.log(\"dataURL - \"); console.log(dataURL);",
									"        ",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        // console.log( resultArr);",
									"        pm.globals.set(\"JSON_Var_All\", resultArr);",
									"        // console.log(pm.globals.get(\"JSON_Var_All\"));",
									"        // console.log(merged);",
									"",
									"        // JSONParse.data.push(merged)",
									"",
									"        // pm.globals.set(\"JSON_Var\",merged);",
									"        //  console.log(pm.globals.get(\"JSON_Var\"));",
									"",
									"        // responseJson2 = pm.response.json();",
									"        //   console.log(\"!!!!!!!!!!!!2!!!!!!!!!!!!\");",
									"        //   console.log(responseJson2);               ",
									"        //   console.log(responseJson2.last_page);               ",
									"    });",
									"});",
									"",
									"// for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i);",
									"    // console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].id).to.be.a(\"string\");",
									"});",
									"",
									"*/",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=id&order=desc&id=&user=&time=&url=&ip=&status=&method=&duration=",
							"host": [
								"{{sand}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "id"
								},
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c4ff4c08-32d7-4573-b2e1-bc5641d3d9aa",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    // url:\"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?page=\",",
									"    //   url: pm.globals.get(\"sand\")+\"/api/clockwork/\"+pm.globals.get(\"API_keys\")+\"?dateFrom=\"+pm.globals.get(\"todeyDate\")+\"&dateTo=\"+pm.globals.get(\"todeyDate\")+\"&page=\",",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, parameters2) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&status=\"+parameters2+\"&sort=id&order=desc&id=&user=&time=&url=&ip=&method=&duration=\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json();",
									"        //   console.log(\"!!!!!!!!!!!1!!!!!!!!!!!!!\");",
									"        //   console.log(responseJson);  ",
									"        //   console.log(responseJson.last_page);  ",
									"        responseJson = response.json().data;",
									"        //  console.log(responseJson);  ",
									"",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"        // const dataMethodArr = Object.values(merged.dataMethod)",
									"        // const dataURLArr = Object.values(merged.dataURL)",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"        ",
									"        for (let i = 0; i < dataURL.length; i++) {",
									"        ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        // console.log(dataMethod);",
									"        // console.log(\"dataURL - \"); console.log(dataURL);",
									"        ",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        // console.log( resultArr);",
									"        // pm.globals.set(\"JSON_Var_404\", resultArr);",
									"        pm.collectionVariables.set(\"JSON_Var_404_sand\", resultArr);",
									"        // console.log(pm.globals.get(\"JSON_Var_404\"));",
									"        // console.log(merged);",
									"",
									"        // JSONParse.data.push(merged)",
									"",
									"        // pm.globals.set(\"JSON_Var\",merged);",
									"        //  console.log(pm.globals.get(\"JSON_Var\"));",
									"",
									"        // responseJson2 = pm.response.json();",
									"        //   console.log(\"!!!!!!!!!!!!2!!!!!!!!!!!!\");",
									"        //   console.log(responseJson2);               ",
									"        //   console.log(responseJson2.last_page);               ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i, 404);",
									"    // console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].id).to.be.a(\"string\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "dec4b758-56c7-4f49-85ef-2a4eedf50200",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"// console.log(pm.globals.get(\"todeyDate\"));",
									"",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"// pm.environment.set(\"current_timestamp\", moment().toISOString())",
									"// pm.environment.set(\"current_timestamp - 1 day\", moment().subtract(1, 'day').toISOString())",
									"// console.log(moment().toISOString());",
									"// console.log(moment().subtract(1, 'day').format(\"YYYY-MM-DD\"))",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=id&order=desc&id=&user=&time=&url=&ip=&status=404&method=&duration=",
							"host": [
								"{{sand}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "id"
								},
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": "404"
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "403",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb367ad8-d2fa-4b4f-9fb3-9e0ea040cbdb",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "48780724-95a4-4126-bf91-f5fe1b7e453a",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    // url:\"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?page=\",",
									"    //   url: pm.globals.get(\"sand\")+\"/api/clockwork/\"+pm.globals.get(\"API_keys\")+\"?dateFrom=\"+pm.globals.get(\"todeyDate\")+\"&dateTo=\"+pm.globals.get(\"todeyDate\")+\"&page=\",",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, parameters2) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&status=\"+parameters2+\"&sort=id&order=desc&id=&user=&time=&url=&ip=&method=&duration=\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json();",
									"        //   console.log(\"!!!!!!!!!!!1!!!!!!!!!!!!!\");",
									"        //   console.log(responseJson);  ",
									"        //   console.log(responseJson.last_page);  ",
									"        responseJson = response.json().data;",
									"        //  console.log(responseJson);  ",
									"",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"        // const dataMethodArr = Object.values(merged.dataMethod)",
									"        // const dataURLArr = Object.values(merged.dataURL)",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"        ",
									"        for (let i = 0; i < dataURL.length; i++) {",
									"        ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        // console.log(dataMethod);",
									"        // console.log(\"dataURL - \"); console.log(dataURL);",
									"        ",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        // console.log( resultArr);",
									"        // pm.globals.set(\"JSON_Var_403\", resultArr);",
									"        pm.collectionVariables.set(\"JSON_Var_403_sand\", resultArr);",
									"        // console.log(pm.globals.get(\"JSON_Var_404\"));",
									"        // console.log(merged);",
									"",
									"        // JSONParse.data.push(merged)",
									"",
									"        // pm.globals.set(\"JSON_Var\",merged);",
									"        //  console.log(pm.globals.get(\"JSON_Var\"));",
									"",
									"        // responseJson2 = pm.response.json();",
									"        //   console.log(\"!!!!!!!!!!!!2!!!!!!!!!!!!\");",
									"        //   console.log(responseJson2);               ",
									"        //   console.log(responseJson2.last_page);               ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i, 403);",
									"    // console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.first_page_url).to.be.a(\"string\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=id&order=desc&id=&user=&time=&url=&ip=&status=403&method=&duration=",
							"host": [
								"{{sand}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "id"
								},
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": "403"
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "500",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b5aaa31a-56b3-4403-9f1a-c829029b8809",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"// console.log(pm.globals.get(\"todeyDate\"));",
									"",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"// pm.environment.set(\"current_timestamp\", moment().toISOString())",
									"// pm.environment.set(\"current_timestamp - 1 day\", moment().subtract(1, 'day').toISOString())",
									"// console.log(moment().toISOString());",
									"// console.log(moment().subtract(1, 'day').format(\"YYYY-MM-DD\"))",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d24be3ec-d687-42b8-b80c-763b26648090",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    // url:\"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?page=\",",
									"    //   url: pm.globals.get(\"sand\")+\"/api/clockwork/\"+pm.globals.get(\"API_keys\")+\"?dateFrom=\"+pm.globals.get(\"todeyDate\")+\"&dateTo=\"+pm.globals.get(\"todeyDate\")+\"&page=\",",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, parameters2) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&status=\" + parameters2+\"&sort=id&order=desc&id=&user=&time=&url=&ip=&method=&duration=\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json();",
									"        //   console.log(\"!!!!!!!!!!!1!!!!!!!!!!!!!\");",
									"        //   console.log(responseJson);  ",
									"        //   console.log(responseJson.last_page);  ",
									"        responseJson = response.json().data;",
									"",
									"",
									"               for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"        // const dataMethodArr = Object.values(merged.dataMethod)",
									"        // const dataURLArr = Object.values(merged.dataURL)",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"        ",
									"        for (let i = 0; i < dataURL.length; i++) {",
									"        ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        // console.log(dataMethod);",
									"        // console.log(\"dataURL - \"); console.log(dataURL);",
									"        ",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        // console.log( resultArr);",
									"        // pm.globals.set(\"JSON_Var_500\", resultArr);",
									"        pm.collectionVariables.set(\"JSON_Var_500_sand\", resultArr);",
									"        // console.log(pm.globals.get(\"JSON_Var_500\"));",
									"        // console.log(merged);",
									"",
									"        // JSONParse.data.push(merged)",
									"",
									"        // pm.globals.set(\"JSON_Var\",merged);",
									"        //  console.log(pm.globals.get(\"JSON_Var\"));",
									"",
									"        // responseJson2 = pm.response.json();",
									"        //   console.log(\"!!!!!!!!!!!!2!!!!!!!!!!!!\");",
									"        //   console.log(responseJson2);               ",
									"        //   console.log(responseJson2.last_page);               ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i, 500);",
									"    // console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"}",
									"// for (let i = 1; i <= 1; ++i) {",
									"//     eval(globals.globalFunction)(i, 200);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.first_page_url).to.be.a(\"string\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=id&order=desc&id=&user=&time=&url=&ip=&status=500&method=&duration=",
							"host": [
								"{{sand}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "id"
								},
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": "500"
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Duration from 1 - 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dcc157dd-9b3c-44b4-ae43-61949e8acdc0",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f8977e16-d943-4953-9ded-d6708fefed35",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, ) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=1000&durationTo=2000\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json().data;",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"      ",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"      ",
									"        for (let i = 0; i < dataURL.length; i++) {    ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        //  console.log(merged);",
									"        //  console.log( resultArr);",
									"        // pm.globals.set(\"JSON_Var_Duration_1-2\", resultArr);              ",
									"        pm.collectionVariables.set(\"JSON_Var_Duration_1-2_sand\", resultArr);              ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i);",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    // pm.expect(jsonData.data).to.be.an(\"object\");",
									"    // pm.expect(jsonData.data).to.be.empty;",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=1000&durationTo=2000&page=1",
							"host": [
								"{{sand}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "duration"
								},
								{
									"key": "order",
									"value": "ASC"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								},
								{
									"key": "durationFrom",
									"value": "1000"
								},
								{
									"key": "durationTo",
									"value": "2000"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Duration from 2 - 5 sec",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dcae6b98-6819-42ec-81ba-8900f5327746",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ec877578-d57f-44a2-b891-c7d7e5256592",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, ) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=2000&durationTo=5000\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json().data;",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"      ",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"      ",
									"        for (let i = 0; i < dataURL.length; i++) {    ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        //  console.log(merged);",
									"        //  console.log( resultArr);",
									"        // pm.globals.set(\"JSON_Var_Duration_2-5\", resultArr);              ",
									"        pm.collectionVariables.set(\"JSON_Var_Duration_2-5_sand\", resultArr);              ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i);",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    // pm.expect(jsonData.data[0].id).to.be.a(\"string\");",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=2000&durationTo=5000&page=1",
							"host": [
								"{{sand}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "duration"
								},
								{
									"key": "order",
									"value": "ASC"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								},
								{
									"key": "durationFrom",
									"value": "2000"
								},
								{
									"key": "durationTo",
									"value": "5000"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Duration from 5 - 10 sec",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7967509d-e8d8-4895-be5e-f66ad4535816",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8803a753-a604-411a-9d1c-03194947ce3a",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, ) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=5000&durationTo=10000\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json().data;",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"      ",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"      ",
									"        for (let i = 0; i < dataURL.length; i++) {    ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        //  console.log(merged);",
									"        //  console.log( resultArr);",
									"        // pm.globals.set(\"JSON_Var_Duration_5-10\", resultArr);              ",
									"        pm.collectionVariables.set(\"JSON_Var_Duration_5-10_sand\", resultArr);              ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i);",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    // pm.expect(jsonData.data[0].id).to.be.a(\"string\");    ",
									"    pm.expect(jsonData).to.be.not.empty;",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=5000&durationTo=10000&page=1",
							"host": [
								"{{sand}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "duration"
								},
								{
									"key": "order",
									"value": "ASC"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								},
								{
									"key": "durationFrom",
									"value": "5000"
								},
								{
									"key": "durationTo",
									"value": "10000"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Duration from 10 - ...",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4d0b471-c322-4fe4-a9c9-1383fe77a066",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, ) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=10000&durationTo=\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json().data;",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"      ",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"      ",
									"        for (let i = 0; i < dataURL.length; i++) {    ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        //  console.log(merged);",
									"        //  console.log( resultArr);",
									"        // pm.globals.set(\"JSON_Var_Duration_10-...\", resultArr);              ",
									"        pm.collectionVariables.set(\"JSON_Var_Duration_10-..._sand\", resultArr);              ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i);",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an(\"array\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b3188c06-e2ec-40e0-ada9-62a4bd800dd8",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{sand}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=10000&durationTo=&page=1",
							"host": [
								"{{sand}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "duration"
								},
								{
									"key": "order",
									"value": "ASC"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								},
								{
									"key": "durationFrom",
									"value": "10000"
								},
								{
									"key": "durationTo",
									"value": ""
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "recive Var",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58811709-40cb-4189-9ef6-de38da3b68aa",
								"exec": [
									"let fs = require('fs'),",
									"    path = require(\"path\"),",
									"    util = require(\"util\");",
									"",
									"// console.log(\"==JSON_Var_All==\");",
									"// console.log(pm.globals.get(\"JSON_Var_All\"));",
									"console.log(\"==JSON_Var_404==\");",
									"    // console.log(JSON.stringify(pm.globals.get(\"JSON_Var_404\"), null, 1))",
									"    console.log(JSON.stringify(pm.collectionVariables.get(\"JSON_Var_404_sand\"), null, 1))",
									"",
									"    // console.log(pm.globals.get(\"JSON_Var_404\"));",
									"console.log(\"==JSON_Var_404==\");",
									"    // console.log(JSON.stringify(pm.globals.get(\"JSON_Var_404\"), null, 1))",
									"    console.log(JSON.stringify(pm.collectionVariables.get(\"JSON_Var_404_sand\"), null, 1))",
									"",
									"    // console.log(pm.globals.get(\"JSON_Var_404\"));",
									"console.log(\"==JSON_Var_500==\");",
									"    // console.log(JSON.stringify(pm.globals.get(\"JSON_Var_500\"), null, 1))",
									"    console.log(JSON.stringify(pm.collectionVariables.get(\"JSON_Var_500_sand\"), null, 1))",
									"",
									"    // console.log(pm.globals.get(\"JSON_Var_500\"));",
									"console.log(\"==JSON_Var_403==\");",
									"    // console.log(JSON.stringify(pm.globals.get(\"JSON_Var_403\"), null, 1))",
									"    console.log(JSON.stringify(pm.collectionVariables.get(\"JSON_Var_403_sand\"), null, 1))",
									"",
									"",
									"    // console.log(pm.globals.get(\"JSON_Var_403\"));",
									"console.log(\"==\");",
									"console.log(\"==JSON_Var_Duration_1-2==\");",
									"    // console.log(JSON.stringify(pm.globals.get(\"JSON_Var_Duration_1-2\"), null, 1));",
									"    console.log(JSON.stringify(pm.collectionVariables.get(\"JSON_Var_Duration_1-2_sand\"), null, 1));",
									"",
									"//  console.log(util.inspect(pm.globals.get(\"JSON_Var_Duration_1-2\"), {maxArrayLength: null, depth:null }));",
									"// console.log(\"==JSON_Var_Duration_1-2==\");",
									"",
									"// console.log(JSON.stringify(pm.globals.get(\"JSON_Var_Duration_1-2\"), null, 1))",
									"// console.log(\"==JSON_Var_Duration_1-2==\");",
									"",
									"// console.dir(pm.globals.get(\"JSON_Var_Duration_1-2\"), {'maxArrayLength': null})",
									"// console.log(pm.globals.get(\"JSON_Var_Duration_1-2\"));",
									"",
									"console.log(\"==\");",
									"console.log(\"==JSON_Var_Duration_2-5==\");",
									"// console.log(util.inspect(pm.globals.get(\"JSON_Var_Duration_2-5\"), {maxArrayLength: null, depth:null }));",
									"// console.log(pm.globals.get(\"JSON_Var_Duration_2-5\"));",
									"    // console.log(JSON.stringify(pm.globals.get(\"JSON_Var_Duration_2-5\"), null, 1))",
									"    console.log(JSON.stringify(pm.collectionVariables.get(\"JSON_Var_Duration_2-5_sand\"), null, 1))",
									"",
									"console.log(\"==\");",
									"console.log(\"==JSON_Var_Duration_5-10==\");",
									"// console.log(pm.globals.get(\"JSON_Var_Duration_5-10\"));",
									"    // console.log(JSON.stringify(pm.globals.get(\"JSON_Var_Duration_5-10\"), null, 1))",
									"    console.log(JSON.stringify(pm.collectionVariables.get(\"JSON_Var_Duration_5-10_sand\"), null, 1))",
									"",
									"console.log(\"==\");",
									"console.log(\"==JSON_Var_Duration_10-...==\");",
									"// console.log(pm.globals.get(\"JSON_Var_Duration_10-...\"));",
									"    // console.log(JSON.stringify(pm.globals.get(\"JSON_Var_Duration_10-...\"), null, 1))",
									"    console.log(JSON.stringify(pm.collectionVariables.get(\"JSON_Var_Duration_10-..._sand\"), null, 1))",
									"",
									"console.log(\"==\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "90a997ae-22ab-48f9-8af7-80a6eafed532",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.google.com/",
							"protocol": "https",
							"host": [
								"www",
								"google",
								"com"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Prod",
			"item": [
				{
					"name": "All",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87b242e5-b4f3-4e1b-b1b0-a94aec0f9a25",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"// console.log(pm.globals.get(\"todeyDate\"));",
									"",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"// pm.environment.set(\"current_timestamp\", moment().toISOString())",
									"// pm.environment.set(\"current_timestamp - 1 day\", moment().subtract(1, 'day').toISOString())",
									"// console.log(moment().toISOString());",
									"// console.log(moment().subtract(1, 'day').format(\"YYYY-MM-DD\"))",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ab472aa1-aff4-41ed-aeb8-a5551817f861",
								"exec": [
									"/*let responseJson2 = pm.response.json();",
									"//  console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    // url:\"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?page=\",",
									"    //   url: pm.globals.get(\"sand\")+\"/api/clockwork/\"+pm.globals.get(\"API_keys\")+\"?dateFrom=\"+pm.globals.get(\"todeyDate\")+\"&dateTo=\"+pm.globals.get(\"todeyDate\")+\"&page=\",",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&status=&sort=id&order=desc&id=&user=&time=&url=&ip=&method=&duration=\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json();",
									"        //   console.log(\"!!!!!!!!!!!1!!!!!!!!!!!!!\");",
									"        //   console.log(responseJson);  ",
									"        //   console.log(responseJson.last_page);  ",
									"        responseJson = response.json().data;",
									"",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"            if (responseJson[i].url==\"/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583\"){}",
									"            else{",
									"                if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                    if (responseJson[i].user_id==null){",
									"                        merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefinedUser\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                    }",
									"                    else{",
									"                        merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                    }",
									"",
									"",
									"",
									"                } else {",
									"                    if (!merged.dataURL[responseJson[i].id]) {",
									"                        merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                    }",
									"                    if (merged.dataURL[responseJson[i].url].user_id) {",
									"                        let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                        if (!qwe) {",
									"                            qwe = 1;",
									"                            if (responseJson[i].user_id==null){",
									"                                merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefinedUser\", qwe];",
									"                            }",
									"                            else{",
									"                                merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                            }",
									"                            merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                        }",
									"                        else {",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                        }",
									"                    }",
									"                    if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                        merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                    }",
									"                    merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                    merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"                }",
									"            }",
									"        }",
									"        ",
									"        // const dataMethodArr = Object.values(merged.dataMethod)",
									"        // const dataURLArr = Object.values(merged.dataURL)",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"        ",
									"        for (let i = 0; i < dataURL.length; i++) {",
									"        ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        // console.log(dataMethod);",
									"        // console.log(\"dataURL - \"); console.log(dataURL);",
									"        ",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        // console.log( resultArr);",
									"        pm.globals.set(\"JSON_Var_All\", resultArr);",
									"        // console.log(pm.globals.get(\"JSON_Var_All\"));",
									"        // console.log(merged);",
									"",
									"        // JSONParse.data.push(merged)",
									"",
									"        // pm.globals.set(\"JSON_Var\",merged);",
									"        //  console.log(pm.globals.get(\"JSON_Var\"));",
									"",
									"        // responseJson2 = pm.response.json();",
									"        //   console.log(\"!!!!!!!!!!!!2!!!!!!!!!!!!\");",
									"        //   console.log(responseJson2);               ",
									"        //   console.log(responseJson2.last_page);               ",
									"    });",
									"});",
									"",
									"// for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i);",
									"    // console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"}",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].id).to.be.a(\"string\");",
									"});",
									"",
									"*/",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prod}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=id&order=desc&id=&user=&time=&url=&ip=&status=&method=&duration=",
							"host": [
								"{{prod}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "id"
								},
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5208aaba-2bce-4180-967a-0e9b4757debc",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    // url:\"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?page=\",",
									"    //   url: pm.globals.get(\"sand\")+\"/api/clockwork/\"+pm.globals.get(\"API_keys\")+\"?dateFrom=\"+pm.globals.get(\"todeyDate\")+\"&dateTo=\"+pm.globals.get(\"todeyDate\")+\"&page=\",",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, parameters2) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&status=\"+parameters2+\"&sort=id&order=desc&id=&user=&time=&url=&ip=&method=&duration=\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json();",
									"        //   console.log(\"!!!!!!!!!!!1!!!!!!!!!!!!!\");",
									"        //   console.log(responseJson);  ",
									"        //   console.log(responseJson.last_page);  ",
									"        responseJson = response.json().data;",
									"        //  console.log(responseJson);  ",
									"",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"        // const dataMethodArr = Object.values(merged.dataMethod)",
									"        // const dataURLArr = Object.values(merged.dataURL)",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"        ",
									"        for (let i = 0; i < dataURL.length; i++) {",
									"        ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        // console.log(dataMethod);",
									"        // console.log(\"dataURL - \"); console.log(dataURL);",
									"        ",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        // console.log( resultArr);",
									"        pm.globals.set(\"JSON_Var_404\", resultArr);",
									"        // console.log(pm.globals.get(\"JSON_Var_404\"));",
									"        // console.log(merged);",
									"",
									"        // JSONParse.data.push(merged)",
									"",
									"        // pm.globals.set(\"JSON_Var\",merged);",
									"        //  console.log(pm.globals.get(\"JSON_Var\"));",
									"",
									"        // responseJson2 = pm.response.json();",
									"        //   console.log(\"!!!!!!!!!!!!2!!!!!!!!!!!!\");",
									"        //   console.log(responseJson2);               ",
									"        //   console.log(responseJson2.last_page);               ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i, 404);",
									"    // console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data[0].id).to.be.a(\"string\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0a987753-af09-434e-976d-d70901451181",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"// console.log(pm.globals.get(\"todeyDate\"));",
									"",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"// pm.environment.set(\"current_timestamp\", moment().toISOString())",
									"// pm.environment.set(\"current_timestamp - 1 day\", moment().subtract(1, 'day').toISOString())",
									"// console.log(moment().toISOString());",
									"// console.log(moment().subtract(1, 'day').format(\"YYYY-MM-DD\"))",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prod}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=id&order=desc&id=&user=&time=&url=&ip=&status=404&method=&duration=",
							"host": [
								"{{prod}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "id"
								},
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": "404"
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "403",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a17f551b-b990-44f6-ac43-acaf9a601f10",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1472fb82-418c-492a-8664-fccb892dd201",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    // url:\"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?page=\",",
									"    //   url: pm.globals.get(\"sand\")+\"/api/clockwork/\"+pm.globals.get(\"API_keys\")+\"?dateFrom=\"+pm.globals.get(\"todeyDate\")+\"&dateTo=\"+pm.globals.get(\"todeyDate\")+\"&page=\",",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, parameters2) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&status=\"+parameters2+\"&sort=id&order=desc&id=&user=&time=&url=&ip=&method=&duration=\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json();",
									"        //   console.log(\"!!!!!!!!!!!1!!!!!!!!!!!!!\");",
									"        //   console.log(responseJson);  ",
									"        //   console.log(responseJson.last_page);  ",
									"        responseJson = response.json().data;",
									"        //  console.log(responseJson);  ",
									"",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"        // const dataMethodArr = Object.values(merged.dataMethod)",
									"        // const dataURLArr = Object.values(merged.dataURL)",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"        ",
									"        for (let i = 0; i < dataURL.length; i++) {",
									"        ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        // console.log(dataMethod);",
									"        // console.log(\"dataURL - \"); console.log(dataURL);",
									"        ",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        // console.log( resultArr);",
									"        pm.globals.set(\"JSON_Var_403\", resultArr);",
									"        // console.log(pm.globals.get(\"JSON_Var_404\"));",
									"        // console.log(merged);",
									"",
									"        // JSONParse.data.push(merged)",
									"",
									"        // pm.globals.set(\"JSON_Var\",merged);",
									"        //  console.log(pm.globals.get(\"JSON_Var\"));",
									"",
									"        // responseJson2 = pm.response.json();",
									"        //   console.log(\"!!!!!!!!!!!!2!!!!!!!!!!!!\");",
									"        //   console.log(responseJson2);               ",
									"        //   console.log(responseJson2.last_page);               ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i, 403);",
									"    // console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.first_page_url).to.be.a(\"string\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prod}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=id&order=desc&id=&user=&time=&url=&ip=&status=403&method=&duration=",
							"host": [
								"{{prod}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "id"
								},
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": "403"
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "500",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff997201-aa38-4dd1-968b-798e7957d7f2",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"// console.log(pm.globals.get(\"todeyDate\"));",
									"",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"// pm.environment.set(\"current_timestamp\", moment().toISOString())",
									"// pm.environment.set(\"current_timestamp - 1 day\", moment().subtract(1, 'day').toISOString())",
									"// console.log(moment().toISOString());",
									"// console.log(moment().subtract(1, 'day').format(\"YYYY-MM-DD\"))",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e9efb722-c0f0-4e6b-b96a-ea3af1d39a4a",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    // url:\"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?page=\",",
									"    //   url: pm.globals.get(\"sand\")+\"/api/clockwork/\"+pm.globals.get(\"API_keys\")+\"?dateFrom=\"+pm.globals.get(\"todeyDate\")+\"&dateTo=\"+pm.globals.get(\"todeyDate\")+\"&page=\",",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, parameters2) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&status=\" + parameters2+\"&sort=id&order=desc&id=&user=&time=&url=&ip=&method=&duration=\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json();",
									"        //   console.log(\"!!!!!!!!!!!1!!!!!!!!!!!!!\");",
									"        //   console.log(responseJson);  ",
									"        //   console.log(responseJson.last_page);  ",
									"        responseJson = response.json().data;",
									"",
									"",
									"               for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"        // const dataMethodArr = Object.values(merged.dataMethod)",
									"        // const dataURLArr = Object.values(merged.dataURL)",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"        ",
									"        for (let i = 0; i < dataURL.length; i++) {",
									"        ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        // console.log(dataMethod);",
									"        // console.log(\"dataURL - \"); console.log(dataURL);",
									"        ",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        // console.log( resultArr);",
									"        pm.globals.set(\"JSON_Var_500\", resultArr);",
									"        // console.log(pm.globals.get(\"JSON_Var_500\"));",
									"        // console.log(merged);",
									"",
									"        // JSONParse.data.push(merged)",
									"",
									"        // pm.globals.set(\"JSON_Var\",merged);",
									"        //  console.log(pm.globals.get(\"JSON_Var\"));",
									"",
									"        // responseJson2 = pm.response.json();",
									"        //   console.log(\"!!!!!!!!!!!!2!!!!!!!!!!!!\");",
									"        //   console.log(responseJson2);               ",
									"        //   console.log(responseJson2.last_page);               ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i, 500);",
									"    // console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"}",
									"// for (let i = 1; i <= 1; ++i) {",
									"//     eval(globals.globalFunction)(i, 200);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.first_page_url).to.be.a(\"string\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prod}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=id&order=desc&id=&user=&time=&url=&ip=&status=500&method=&duration=",
							"host": [
								"{{prod}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "id"
								},
								{
									"key": "order",
									"value": "desc"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": "500"
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Duration from 1 - 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "eb12ee93-ebde-4748-8998-c12e9235a0b4",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f67059b9-c77a-4b6d-89b2-bca21f5aeda4",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, ) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=1000&durationTo=2000\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json().data;",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"      ",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"      ",
									"        for (let i = 0; i < dataURL.length; i++) {    ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        //  console.log(merged);",
									"        //  console.log( resultArr);",
									"        pm.globals.set(\"JSON_Var_Duration_1-2\", resultArr);              ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i);",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    // pm.expect(jsonData.data).to.be.an(\"object\");",
									"    // pm.expect(jsonData.data).to.be.empty;",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prod}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=1000&durationTo=2000&page=1",
							"host": [
								"{{prod}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "duration"
								},
								{
									"key": "order",
									"value": "ASC"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								},
								{
									"key": "durationFrom",
									"value": "1000"
								},
								{
									"key": "durationTo",
									"value": "2000"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Duration from 2 - 5 sec",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d98b846f-855f-40ba-963d-79fb41a66ed1",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2a6d8015-03c9-4da7-8a00-73388d865634",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, ) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=2000&durationTo=5000\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json().data;",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"      ",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"      ",
									"        for (let i = 0; i < dataURL.length; i++) {    ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        //  console.log(merged);",
									"        //  console.log( resultArr);",
									"        pm.globals.set(\"JSON_Var_Duration_2-5\", resultArr);              ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i);",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    // pm.expect(jsonData.data[0].id).to.be.a(\"string\");",
									"    pm.expect(jsonData).to.be.not.empty;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prod}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=2000&durationTo=5000&page=1",
							"host": [
								"{{prod}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "duration"
								},
								{
									"key": "order",
									"value": "ASC"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								},
								{
									"key": "durationFrom",
									"value": "2000"
								},
								{
									"key": "durationTo",
									"value": "5000"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Duration from 5 - 10 sec",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bfe1e8e0-33ec-4bbb-8d76-b733518ac78e",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2747cfff-51b5-46dc-86ad-5be8f59079ff",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, ) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=5000&durationTo=10000\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json().data;",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"      ",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"      ",
									"        for (let i = 0; i < dataURL.length; i++) {    ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        //  console.log(merged);",
									"        //  console.log( resultArr);",
									"        pm.globals.set(\"JSON_Var_Duration_5-10\", resultArr);              ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i);",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    // pm.expect(jsonData.data[0].id).to.be.a(\"string\");    ",
									"    pm.expect(jsonData).to.be.not.empty;",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prod}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=5000&durationTo=10000&page=1",
							"host": [
								"{{prod}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "duration"
								},
								{
									"key": "order",
									"value": "ASC"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								},
								{
									"key": "durationFrom",
									"value": "5000"
								},
								{
									"key": "durationTo",
									"value": "10000"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Duration from 10 - ...",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a1067a5-cab9-4a2e-b75d-042475729acf",
								"exec": [
									"let responseJson2 = pm.response.json();",
									"// console.log(responseJson2.data);",
									"",
									"const postRequest3 = {",
									"    url: \"https://sandbox.driveroo.com/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom=\" + pm.globals.get(\"todeyDate\") + \"&dateTo=\" + pm.globals.get(\"todeyDate\") + \"&page=\",",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json',",
									"        'X-Foo': 'bar'",
									"    },",
									"    body: {",
									"    }",
									"};",
									"",
									"let merged = { dataMethod: {}, dataURL: {} };",
									"",
									"postman.setGlobalVariable(\"globalFunction\", (parameters1, ) => {",
									"    pm.sendRequest(postRequest3.url + parameters1 + \"&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=10000&durationTo=\", (error, response) => {",
									"        // console.log(error ? error : response.json());",
									"",
									"        let responseJson = response.json().data;",
									"",
									"        for (var i = 0; i < responseJson.length; i++) {",
									"            if (!merged.dataMethod[responseJson[i].method]) {",
									"",
									"                merged.dataMethod[responseJson[i].method] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].method, responseJson[i].duration] }, user_id: { [responseJson[i].user_id]: 1 }, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"            }",
									"",
									"            if (!merged.dataURL[responseJson[i].url]) {                        ",
									"                if (responseJson[i].user_id==null){",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [\"undefined use\",1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"                else{",
									"                    merged.dataURL[responseJson[i].url] = { URL: responseJson[i].url, data_id: { [responseJson[i].id]: [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries] }, user_id: { [responseJson[i].user_id]: [responseJson[i].user_id,1]}, duration: responseJson[i].duration, count: 1, totalDuration: responseJson[i].duration, totalUser: 1, totalDuration: responseJson[i].duration, maxDuration: responseJson[i].duration };",
									"                }",
									"",
									"            } else {",
									"                if (!merged.dataURL[responseJson[i].id]) {",
									"                    merged.dataURL[responseJson[i].url].data_id[responseJson[i].id] = [responseJson[i].id, responseJson[i].method, responseJson[i].response_status, responseJson[i].duration, responseJson[i].time, responseJson[i].db_duration, responseJson[i].db_queries];",
									"                }",
									"                if (merged.dataURL[responseJson[i].url].user_id) {",
									"                    let qwe = merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id];",
									"",
									"                    if (!qwe) {",
									"                        qwe = 1;",
									"                        if (responseJson[i].user_id==null){",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[\"undefined use\", qwe];",
									"                        }",
									"                        else{",
									"                            merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id] =[responseJson[i].user_id, qwe];",
									"                        }",
									"                        merged.dataURL[responseJson[i].url].totalUser += 1;",
									"                    }",
									"                    else {",
									"                        merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1] = Number(merged.dataURL[responseJson[i].url].user_id[responseJson[i].user_id][1]) + 1;",
									"                    }",
									"                }",
									"                if (Number(merged.dataURL[responseJson[i].url].maxDuration) < Number(responseJson[i].duration)) {",
									"                    merged.dataURL[responseJson[i].url].maxDuration = Number(responseJson[i].duration);",
									"",
									"                }",
									"                merged.dataURL[responseJson[i].url].count = Number(merged.dataURL[responseJson[i].url].count) + 1;",
									"                merged.dataURL[responseJson[i].url].totalDuration = (Number(merged.dataURL[responseJson[i].url].totalDuration) + Number(responseJson[i].duration)).toFixed(2);",
									"            }",
									"        }",
									"      ",
									"        const dataMethod = Object.values(merged.dataMethod);",
									"        const dataURL = Object.values(merged.dataURL);",
									"      ",
									"        for (let i = 0; i < dataURL.length; i++) {    ",
									"            let URL = dataURL[i].URL",
									"            let data_id = Object.values(dataURL[i].data_id)",
									"            let user_id = Object.values(dataURL[i].user_id)",
									"            let duration = dataURL[i].duration",
									"            let count = dataURL[i].count",
									"            let totalDuration = dataURL[i].totalDuration",
									"            let totalUser = dataURL[i].totalUser",
									"            let maxDuration = dataURL[i].maxDuration",
									"",
									"            dataURL[i] = {",
									"                URL,",
									"                data_id,",
									"                user_id,",
									"                duration,",
									"                count,",
									"                totalDuration,",
									"                totalUser,",
									"                maxDuration",
									"            }",
									"        }",
									"",
									"        const resultArr = {",
									"            dataMethod,",
									"            dataURL",
									"        };",
									"        //  console.log(merged);",
									"        //  console.log( resultArr);",
									"        pm.globals.set(\"JSON_Var_Duration_10-...\", resultArr);              ",
									"    });",
									"});",
									"",
									"for (let i = 1; i <= pm.response.json().last_page; ++i) {",
									"    eval(globals.globalFunction)(i);",
									"}",
									"// for (let i = 1; i <= 5; ++i) {",
									"//     eval(globals.globalFunction)(i);",
									"//     console.log(\"------------------- cikle = \" + i + \"--------------------------\");",
									"// }",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Your test name\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.be.an(\"array\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "aedb51d6-14be-48e4-b3c2-bf8ed19a7752",
								"exec": [
									"var moment = require('moment');",
									"// pm.globals.set(\"todeyDate\", moment().format(\"YYYY-MM-DD\"));",
									"pm.globals.set(\"todeyDate\", moment().subtract(1, 'day').format(\"YYYY-MM-DD\"));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{prod}}/api/clockwork/024e5916-d002-47e8-83f9-15ba0860c583?dateFrom={{todeyDate}}&dateTo={{todeyDate}}&page=&sort=duration&order=ASC&id=&user=&time=&url=&ip=&status=&method=&duration=&durationFrom=10000&durationTo=&page=1",
							"host": [
								"{{prod}}"
							],
							"path": [
								"api",
								"clockwork",
								"024e5916-d002-47e8-83f9-15ba0860c583"
							],
							"query": [
								{
									"key": "dateFrom",
									"value": "{{todeyDate}}"
								},
								{
									"key": "dateTo",
									"value": "{{todeyDate}}"
								},
								{
									"key": "page",
									"value": ""
								},
								{
									"key": "sort",
									"value": "duration"
								},
								{
									"key": "order",
									"value": "ASC"
								},
								{
									"key": "id",
									"value": ""
								},
								{
									"key": "user",
									"value": ""
								},
								{
									"key": "time",
									"value": ""
								},
								{
									"key": "url",
									"value": ""
								},
								{
									"key": "ip",
									"value": ""
								},
								{
									"key": "status",
									"value": ""
								},
								{
									"key": "method",
									"value": ""
								},
								{
									"key": "duration",
									"value": ""
								},
								{
									"key": "durationFrom",
									"value": "10000"
								},
								{
									"key": "durationTo",
									"value": ""
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "recive Var",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8e89a55-deee-41f3-9345-7f127594474c",
								"exec": [
									"let fs = require('fs'),",
									"    path = require(\"path\"),",
									"    util = require(\"util\");",
									"",
									"// console.log(\"==JSON_Var_All==\");",
									"// console.log(pm.globals.get(\"JSON_Var_All\"));",
									"console.log(\"==JSON_Var_404==\");",
									"    console.log(JSON.stringify(pm.globals.get(\"JSON_Var_404\"), null, 1))",
									"",
									"    // console.log(pm.globals.get(\"JSON_Var_404\"));",
									"console.log(\"==JSON_Var_404==\");",
									"    console.log(JSON.stringify(pm.globals.get(\"JSON_Var_404\"), null, 1))",
									"",
									"    // console.log(pm.globals.get(\"JSON_Var_404\"));",
									"console.log(\"==JSON_Var_500==\");",
									"    console.log(JSON.stringify(pm.globals.get(\"JSON_Var_500\"), null, 1))",
									"",
									"    // console.log(pm.globals.get(\"JSON_Var_500\"));",
									"console.log(\"==JSON_Var_403==\");",
									"    console.log(JSON.stringify(pm.globals.get(\"JSON_Var_403\"), null, 1))",
									"",
									"",
									"    // console.log(pm.globals.get(\"JSON_Var_403\"));",
									"console.log(\"==\");",
									"console.log(\"==JSON_Var_Duration_1-2==\");",
									"    console.log(JSON.stringify(pm.globals.get(\"JSON_Var_Duration_1-2\"), null, 1))",
									"",
									"//  console.log(util.inspect(pm.globals.get(\"JSON_Var_Duration_1-2\"), {maxArrayLength: null, depth:null }));",
									"// console.log(\"==JSON_Var_Duration_1-2==\");",
									"",
									"// console.log(JSON.stringify(pm.globals.get(\"JSON_Var_Duration_1-2\"), null, 1))",
									"// console.log(\"==JSON_Var_Duration_1-2==\");",
									"",
									"// console.dir(pm.globals.get(\"JSON_Var_Duration_1-2\"), {'maxArrayLength': null})",
									"// console.log(pm.globals.get(\"JSON_Var_Duration_1-2\"));",
									"",
									"console.log(\"==\");",
									"console.log(\"==JSON_Var_Duration_2-5==\");",
									"// console.log(util.inspect(pm.globals.get(\"JSON_Var_Duration_2-5\"), {maxArrayLength: null, depth:null }));",
									"// console.log(pm.globals.get(\"JSON_Var_Duration_2-5\"));",
									"    console.log(JSON.stringify(pm.globals.get(\"JSON_Var_Duration_2-5\"), null, 1))",
									"",
									"console.log(\"==\");",
									"console.log(\"==JSON_Var_Duration_5-10==\");",
									"// console.log(pm.globals.get(\"JSON_Var_Duration_5-10\"));",
									"    console.log(JSON.stringify(pm.globals.get(\"JSON_Var_Duration_5-10\"), null, 1))",
									"",
									"console.log(\"==\");",
									"console.log(\"==JSON_Var_Duration_10-...==\");",
									"// console.log(pm.globals.get(\"JSON_Var_Duration_10-...\"));",
									"    console.log(JSON.stringify(pm.globals.get(\"JSON_Var_Duration_10-...\"), null, 1))",
									"",
									"console.log(\"==\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b585e2b9-1385-4807-9a2e-225e09183b46",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.google.com/",
							"protocol": "https",
							"host": [
								"www",
								"google",
								"com"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "eddf121b-16fb-4662-a096-3b48ae97522f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d18aacce-014b-4a5c-aa56-eb71fa58dbb4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "63344162-28b8-4625-9a2f-201b1d5f02b1",
			"key": "sand",
			"value": "https://sandbox.driveroo.com"
		},
		{
			"id": "4884c823-4d62-4c3c-a3c6-98c7bc6b9137",
			"key": "prod",
			"value": "https://lp.driveroo.com/driveroo"
		},
		{
			"id": "ae56aef6-a61a-42ca-b7b9-93645983c286",
			"key": "JSON_Var_404_sand",
			"value": ""
		},
		{
			"id": "29d4e874-fb47-4f3d-b211-9acae80fb2d9",
			"key": "JSON_Var_403_sand",
			"value": ""
		},
		{
			"id": "4dd8ade0-15d1-4131-8f83-f8ec9a53452a",
			"key": "JSON_Var_500_sand",
			"value": ""
		},
		{
			"id": "892e4012-80ac-4ce7-8ff8-2c725b22445b",
			"key": "JSON_Var_Duration_1-2_sand",
			"value": ""
		},
		{
			"id": "623306ec-cd47-47a0-a308-5d60d0b29125",
			"key": "JSON_Var_Duration_2-5_sand",
			"value": ""
		},
		{
			"id": "f140ee8a-f049-4e1d-a9d3-e727d3fd630b",
			"key": "JSON_Var_Duration_5-10_sand",
			"value": ""
		},
		{
			"id": "fda92d1e-0de0-4b43-91db-a3e8d2fc98df",
			"key": "JSON_Var_Duration_10-..._sand",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}